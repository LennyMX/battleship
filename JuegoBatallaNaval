import java.util.*;
import java.util.Vector;
import java.io.*;

public class JuegoBatallaNaval {
    private Jugador jugador1;
    private Jugador jugador2;
    private boolean turnoJugador1 = true;
    private Scanner scanner = new Scanner(System.in);

    public void iniciar() {
        System.out.print("Nombre del jugador 1: ");
        jugador1 = new Jugador(scanner.nextLine());
        System.out.print("Nombre del jugador 2: ");
        jugador2 = new Jugador(scanner.nextLine());

        System.out.println("Posicionamiento de barcos...");
        colocarBarcos(jugador1);
        colocarBarcos(jugador2);

        jugar();
    }

    private void colocarBarcos(Jugador jugador) {
        System.out.println(jugador.getNombre() + ", coloca tus barcos:");
        int[] tamaños = {5, 4, 3, 3, 2};  

        for (int i = 0; i < tamaños.length; i++) {
            int tamaño = tamaños[i];
            System.out.println("\nPosicionando barco #" + (i + 1) + " de tamaño " + tamaño);
            boolean valido = false;

            while (!valido) {
                jugador.getTableroBarcos().mostrar(true);

                System.out.print("Fila inicial: ");
                int fila = scanner.nextInt();
                System.out.print("Columna inicial: ");
                int columna = scanner.nextInt();
                System.out.print("¿Horizontal (H) o Vertical (V)? ");
                char dir = scanner.next().toUpperCase().charAt(0);

                Vector<Coordenada> coords = new Vector<>();
                boolean dentroLimite = true;
                boolean sobreOtroBarco = false;

                for (int j = 0; j < tamaño; j++) {
                    int f = (dir == 'H') ? fila : fila + j;
                    int c = (dir == 'H') ? columna + j : columna;

                    if (f >= 10 || c >= 10) {
                        dentroLimite = false;
                        break;
                    }

                    Coordenada coord = new Coordenada(f, c);
                    if (jugador.getTableroBarcos().estaOcupado(coord)) {
                        sobreOtroBarco = true;
                        break;
                    }

                    coords.add(coord);
                }

                if (!dentroLimite) {
                    System.out.println("¡Fuera de los límites! Intenta otra vez.");
                    continue;
                }

                if (sobreOtroBarco) {
                    System.out.println("¡Esa posición ya está ocupada por otro barco! Intenta otra vez.");
                    continue;
                }

                for (Coordenada c : coords) {
                    jugador.getTableroBarcos().marcarBarco(c);
                }

                jugador.agregarBarco(new Barco(coords));
                valido = true;
            }
        }
    }

    private void jugar() {
        Jugador actual = turnoJugador1 ? jugador1 : jugador2;
        Jugador oponente = turnoJugador1 ? jugador2 : jugador1;

        while (jugador1.tieneBarcosVivos() && jugador2.tieneBarcosVivos()) {
            boolean turnoExtra;
            do {
                System.out.println("\nTurno de " + actual.getNombre());
                System.out.println("Tablero de disparos:");
                actual.getTableroDisparos().mostrar(false);

                System.out.print("Fila a disparar: ");
                int fila = scanner.nextInt();
                System.out.print("Columna a disparar: ");
                int columna = scanner.nextInt();

                Coordenada c = new Coordenada(fila, columna);
                boolean acierto = oponente.recibirDisparo(c);
                String resultado = oponente.verificarEstado(c);
                actual.getTableroDisparos().marcarImpacto(c, acierto);

                System.out.println(resultado);

    
                if (!oponente.tieneBarcosVivos()) {
                    System.out.println("\n¡Todos los barcos de " + oponente.getNombre() + " han sido hundidos!");
                    System.out.println("¡Ganador: " + actual.getNombre() + "!");
                    return;
                }

                turnoExtra = resultado.equals("¡Impacto!") || resultado.equals("¡Hundido!");
            } while (turnoExtra);

            Jugador temp = actual;
            actual = oponente;
            oponente = temp;

            turnoJugador1 = (actual == jugador1);
            guardarJuego();
        }
    }

    private void guardarJuego() {
        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("juego_guardado.dat"))) {
            out.writeObject(jugador1);
            out.writeObject(jugador2);
            out.writeBoolean(turnoJugador1); 
            System.out.println("Juego guardado correctamente.");
        } catch (IOException e) {
            System.out.println("Error al guardar el juego: " + e.getMessage());
        }
    }

    private boolean cargarJuego() {
        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream("juego_guardado.dat"))) {
            jugador1 = (Jugador) in.readObject();
            jugador2 = (Jugador) in.readObject();
            turnoJugador1 = in.readBoolean(); 
            System.out.println("Juego cargado correctamente.");
            return true;
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("No se pudo cargar el juego guardado.");
            return false;
        }
    }

    public static void main(String[] args) {
        JuegoBatallaNaval juego = new JuegoBatallaNaval();
        Scanner sc = new Scanner(System.in);

        System.out.print("¿Deseas cargar un juego guardado? (s/n): ");
        String respuesta = sc.nextLine().trim().toLowerCase();
        if (respuesta.equals("s")) {
            if (!juego.cargarJuego()) {
                System.out.println("Iniciando nuevo juego...");
                juego.iniciar();
            } else {
                juego.jugar();
            }
        } else {
            juego.iniciar();
        }
    }
}
